// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, name, password, created_at, storage_quota)
VALUES ($1, $2, $3, NOW(), $4)
RETURNING id, name, email, password, role, created_at, storage_quota, storage_used
`

type CreateUserParams struct {
	Email        string `json:"email"`
	Name         string `json:"name"`
	Password     string `json:"password"`
	StorageQuota int64  `json:"storage_quota"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.StorageQuota,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.StorageQuota,
		&i.StorageUsed,
	)
	return i, err
}

const getDeduplicatedUsage = `-- name: GetDeduplicatedUsage :one
SELECT COALESCE(SUM(b.size), 0)::BIGINT
FROM blobs b
WHERE b.id IN (
    SELECT DISTINCT blob_id FROM files WHERE owner_id = $1
)
`

func (q *Queries) GetDeduplicatedUsage(ctx context.Context, ownerID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getDeduplicatedUsage, ownerID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, role, created_at, storage_quota, storage_used FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.StorageQuota,
		&i.StorageUsed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, role, created_at, storage_quota, storage_used FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.StorageQuota,
		&i.StorageUsed,
	)
	return i, err
}

const listOtherUsers = `-- name: ListOtherUsers :many
SELECT id, email, name
FROM users
WHERE id <> $1
ORDER BY name
`

type ListOtherUsersRow struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

func (q *Queries) ListOtherUsers(ctx context.Context, id int64) ([]ListOtherUsersRow, error) {
	rows, err := q.db.Query(ctx, listOtherUsers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOtherUsersRow{}
	for rows.Next() {
		var i ListOtherUsersRow
		if err := rows.Scan(&i.ID, &i.Email, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(
    SELECT 1 FROM users WHERE id = $1
)
`

func (q *Queries) UserExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
