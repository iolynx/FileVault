// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: audit_logs.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (
    user_id,
    action,
    target_id,
    details
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, action, target_id, details, created_at
`

type CreateAuditLogParams struct {
	UserID   sql.NullInt64 `json:"user_id"`
	Action   AuditAction   `json:"action"`
	TargetID pgtype.UUID   `json:"target_id"`
	Details  []byte        `json:"details"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.UserID,
		arg.Action,
		arg.TargetID,
		arg.Details,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.TargetID,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}

const getAuditLogActivityByDay = `-- name: GetAuditLogActivityByDay :many
SELECT
    DATE_TRUNC('day', created_at)::date AS activity_day,
    COUNT(*) AS event_count
FROM audit_logs
WHERE created_at >= $1 AND created_at <= $2
GROUP BY activity_day
ORDER BY activity_day
`

type GetAuditLogActivityByDayParams struct {
	StartDate pgtype.Timestamptz `json:"start_date"`
	EndDate   pgtype.Timestamptz `json:"end_date"`
}

type GetAuditLogActivityByDayRow struct {
	ActivityDay pgtype.Date `json:"activity_day"`
	EventCount  int64       `json:"event_count"`
}

func (q *Queries) GetAuditLogActivityByDay(ctx context.Context, arg GetAuditLogActivityByDayParams) ([]GetAuditLogActivityByDayRow, error) {
	rows, err := q.db.Query(ctx, getAuditLogActivityByDay, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAuditLogActivityByDayRow{}
	for rows.Next() {
		var i GetAuditLogActivityByDayRow
		if err := rows.Scan(&i.ActivityDay, &i.EventCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogs = `-- name: ListAuditLogs :many
SELECT id, user_id, action, target_id, details, created_at FROM audit_logs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAuditLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAuditLogs(ctx context.Context, arg ListAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetID,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
