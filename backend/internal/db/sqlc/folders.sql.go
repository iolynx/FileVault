// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: folders.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createFolder = `-- name: CreateFolder :one
INSERT INTO folders (
    name,
    owner_id,
    parent_folder_id
) VALUES (
    $1, $2, $3
) RETURNING id, name, owner_id, parent_folder_id, created_at
`

type CreateFolderParams struct {
	Name           string      `json:"name"`
	OwnerID        int64       `json:"owner_id"`
	ParentFolderID pgtype.UUID `json:"parent_folder_id"`
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (Folder, error) {
	row := q.db.QueryRow(ctx, createFolder, arg.Name, arg.OwnerID, arg.ParentFolderID)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.ParentFolderID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFolder = `-- name: DeleteFolder :exec
DELETE FROM folders
WHERE id = $1
`

func (q *Queries) DeleteFolder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFolder, id)
	return err
}

const getFolderByID = `-- name: GetFolderByID :one
SELECT id, name, owner_id, parent_folder_id, created_at FROM folders
WHERE id = $1
`

func (q *Queries) GetFolderByID(ctx context.Context, id uuid.UUID) (Folder, error) {
	row := q.db.QueryRow(ctx, getFolderByID, id)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.ParentFolderID,
		&i.CreatedAt,
	)
	return i, err
}

const listSelectableFolders = `-- name: ListSelectableFolders :many
WITH RECURSIVE forbidden_folders AS (
    SELECT id FROM folders WHERE id = $2::uuid

    UNION ALL

    -- find all children of the folders already in our set.
    SELECT f.id
    FROM folders f
    INNER JOIN forbidden_folders ff ON f.parent_folder_id = ff.id
)
SELECT
    f.id,
    f.name,
    f.created_at,
    f.parent_folder_id
FROM folders f
WHERE
    f.owner_id = $1
    -- exclude all folders that are in the forbidden list
    AND f.id NOT IN (SELECT id FROM forbidden_folders)
ORDER BY
    f.created_at DESC
`

type ListSelectableFoldersParams struct {
	OwnerID         int64       `json:"owner_id"`
	CurrentFolderID pgtype.UUID `json:"current_folder_id"`
}

type ListSelectableFoldersRow struct {
	ID             uuid.UUID          `json:"id"`
	Name           string             `json:"name"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	ParentFolderID pgtype.UUID        `json:"parent_folder_id"`
}

func (q *Queries) ListSelectableFolders(ctx context.Context, arg ListSelectableFoldersParams) ([]ListSelectableFoldersRow, error) {
	rows, err := q.db.Query(ctx, listSelectableFolders, arg.OwnerID, arg.CurrentFolderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSelectableFoldersRow{}
	for rows.Next() {
		var i ListSelectableFoldersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ParentFolderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFolder = `-- name: UpdateFolder :one
UPDATE folders
SET 
    name = $2,
    parent_folder_id = $3
WHERE 
    id = $1
RETURNING id, name as filename, owner_id, parent_folder_id, created_at
`

type UpdateFolderParams struct {
	ID             uuid.UUID   `json:"id"`
	Name           string      `json:"name"`
	ParentFolderID pgtype.UUID `json:"parent_folder_id"`
}

type UpdateFolderRow struct {
	ID             uuid.UUID          `json:"id"`
	Filename       string             `json:"filename"`
	OwnerID        int64              `json:"owner_id"`
	ParentFolderID pgtype.UUID        `json:"parent_folder_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) UpdateFolder(ctx context.Context, arg UpdateFolderParams) (UpdateFolderRow, error) {
	row := q.db.QueryRow(ctx, updateFolder, arg.ID, arg.Name, arg.ParentFolderID)
	var i UpdateFolderRow
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.OwnerID,
		&i.ParentFolderID,
		&i.CreatedAt,
	)
	return i, err
}

const updateFolderParentFolder = `-- name: UpdateFolderParentFolder :exec
UPDATE folders
SET parent_folder_id = $1
WHERE id = $2
RETURNING id, name, owner_id, parent_folder_id, created_at
`

type UpdateFolderParentFolderParams struct {
	ParentFolderID pgtype.UUID `json:"parent_folder_id"`
	ID             uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateFolderParentFolder(ctx context.Context, arg UpdateFolderParentFolderParams) error {
	_, err := q.db.Exec(ctx, updateFolderParentFolder, arg.ParentFolderID, arg.ID)
	return err
}
