// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AuditAction string

const (
	AuditActionUSERREGISTERED AuditAction = "USER_REGISTERED"
	AuditActionUSERLOGGEDIN   AuditAction = "USER_LOGGED_IN"
	AuditActionFILEUPLOADED   AuditAction = "FILE_UPLOADED"
	AuditActionFILEDOWNLOADED AuditAction = "FILE_DOWNLOADED"
	AuditActionFILERENAMED    AuditAction = "FILE_RENAMED"
	AuditActionFILEDELETED    AuditAction = "FILE_DELETED"
)

func (e *AuditAction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuditAction(s)
	case string:
		*e = AuditAction(s)
	default:
		return fmt.Errorf("unsupported scan type for AuditAction: %T", src)
	}
	return nil
}

type NullAuditAction struct {
	AuditAction AuditAction `json:"audit_action"`
	Valid       bool        `json:"valid"` // Valid is true if AuditAction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuditAction) Scan(value interface{}) error {
	if value == nil {
		ns.AuditAction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuditAction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuditAction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuditAction), nil
}

type AuditLog struct {
	ID        int64              `json:"id"`
	UserID    sql.NullInt64      `json:"user_id"`
	Action    AuditAction        `json:"action"`
	TargetID  pgtype.UUID        `json:"target_id"`
	Details   []byte             `json:"details"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Blob struct {
	ID          uuid.UUID          `json:"id"`
	Sha256      string             `json:"sha256"`
	StoragePath string             `json:"storage_path"`
	Size        int64              `json:"size"`
	MimeType    pgtype.Text        `json:"mime_type"`
	Refcount    int32              `json:"refcount"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type File struct {
	ID            uuid.UUID          `json:"id"`
	OwnerID       int64              `json:"owner_id"`
	BlobID        uuid.UUID          `json:"blob_id"`
	Filename      string             `json:"filename"`
	DeclaredMime  pgtype.Text        `json:"declared_mime"`
	Size          int64              `json:"size"`
	UploadedAt    pgtype.Timestamptz `json:"uploaded_at"`
	IsPublic      pgtype.Bool        `json:"is_public"`
	PublicToken   pgtype.UUID        `json:"public_token"`
	DownloadCount sql.NullInt64      `json:"download_count"`
	FolderID      pgtype.UUID        `json:"folder_id"`
}

type FileShare struct {
	ID         int64              `json:"id"`
	FileID     uuid.UUID          `json:"file_id"`
	SharedWith int64              `json:"shared_with"`
	Permission string             `json:"permission"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type Folder struct {
	ID             uuid.UUID          `json:"id"`
	Name           string             `json:"name"`
	OwnerID        int64              `json:"owner_id"`
	ParentFolderID pgtype.UUID        `json:"parent_folder_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID           int64            `json:"id"`
	Name         string           `json:"name"`
	Email        string           `json:"email"`
	Password     string           `json:"password"`
	Role         string           `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	StorageQuota int64            `json:"storage_quota"`
	StorageUsed  int64            `json:"storage_used"`
}
