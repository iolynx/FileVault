// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: storage.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBlob = `-- name: CreateBlob :one
INSERT INTO blobs (sha256, storage_path, size, mime_type, refcount)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, sha256, storage_path, size, mime_type, refcount, created_at
`

type CreateBlobParams struct {
	Sha256      string      `json:"sha256"`
	StoragePath string      `json:"storage_path"`
	Size        int64       `json:"size"`
	MimeType    pgtype.Text `json:"mime_type"`
	Refcount    int32       `json:"refcount"`
}

func (q *Queries) CreateBlob(ctx context.Context, arg CreateBlobParams) (Blob, error) {
	row := q.db.QueryRow(ctx, createBlob,
		arg.Sha256,
		arg.StoragePath,
		arg.Size,
		arg.MimeType,
		arg.Refcount,
	)
	var i Blob
	err := row.Scan(
		&i.ID,
		&i.Sha256,
		&i.StoragePath,
		&i.Size,
		&i.MimeType,
		&i.Refcount,
		&i.CreatedAt,
	)
	return i, err
}

const createFile = `-- name: CreateFile :one
INSERT INTO files (owner_id, blob_id, filename, declared_mime, size)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, owner_id, blob_id, filename, declared_mime, size, uploaded_at, is_public, public_token, download_count
`

type CreateFileParams struct {
	OwnerID      int64       `json:"owner_id"`
	BlobID       uuid.UUID   `json:"blob_id"`
	Filename     string      `json:"filename"`
	DeclaredMime pgtype.Text `json:"declared_mime"`
	Size         int64       `json:"size"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.OwnerID,
		arg.BlobID,
		arg.Filename,
		arg.DeclaredMime,
		arg.Size,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.BlobID,
		&i.Filename,
		&i.DeclaredMime,
		&i.Size,
		&i.UploadedAt,
		&i.IsPublic,
		&i.PublicToken,
		&i.DownloadCount,
	)
	return i, err
}

const decrementBlobRefcount = `-- name: DecrementBlobRefcount :one
UPDATE blobs SET refcount = refcount - 1
WHERE id = $1
RETURNING refcount
`

func (q *Queries) DecrementBlobRefcount(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, decrementBlobRefcount, id)
	var refcount int32
	err := row.Scan(&refcount)
	return refcount, err
}

const deleteBlob = `-- name: DeleteBlob :exec
DELETE FROM blobs
WHERE id = $1
`

func (q *Queries) DeleteBlob(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlob, id)
	return err
}

const deleteBlobIfUnused = `-- name: DeleteBlobIfUnused :exec
DELETE FROM blobs WHERE id = $1 AND refcount <= 0
`

func (q *Queries) DeleteBlobIfUnused(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlobIfUnused, id)
	return err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files
WHERE id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFile, id)
	return err
}

const getBlobByID = `-- name: GetBlobByID :one
SELECT id, sha256, storage_path, size, mime_type, refcount, created_at FROM blobs WHERE id = $1
`

func (q *Queries) GetBlobByID(ctx context.Context, id uuid.UUID) (Blob, error) {
	row := q.db.QueryRow(ctx, getBlobByID, id)
	var i Blob
	err := row.Scan(
		&i.ID,
		&i.Sha256,
		&i.StoragePath,
		&i.Size,
		&i.MimeType,
		&i.Refcount,
		&i.CreatedAt,
	)
	return i, err
}

const getBlobBySha = `-- name: GetBlobBySha :one
SELECT id, sha256, storage_path, size, mime_type, refcount, created_at FROM blobs WHERE sha256 = $1
`

func (q *Queries) GetBlobBySha(ctx context.Context, sha256 string) (Blob, error) {
	row := q.db.QueryRow(ctx, getBlobBySha, sha256)
	var i Blob
	err := row.Scan(
		&i.ID,
		&i.Sha256,
		&i.StoragePath,
		&i.Size,
		&i.MimeType,
		&i.Refcount,
		&i.CreatedAt,
	)
	return i, err
}

const getFileByUUID = `-- name: GetFileByUUID :one
SELECT id, owner_id, blob_id, filename, declared_mime, size, uploaded_at, is_public, public_token, download_count
FROM files f
WHERE f.id = $1
`

func (q *Queries) GetFileByUUID(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRow(ctx, getFileByUUID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.BlobID,
		&i.Filename,
		&i.DeclaredMime,
		&i.Size,
		&i.UploadedAt,
		&i.IsPublic,
		&i.PublicToken,
		&i.DownloadCount,
	)
	return i, err
}

const incrementBlobRefcount = `-- name: IncrementBlobRefcount :one
UPDATE blobs SET refcount = refcount + 1
WHERE id = $1
RETURNING refcount
`

func (q *Queries) IncrementBlobRefcount(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, incrementBlobRefcount, id)
	var refcount int32
	err := row.Scan(&refcount)
	return refcount, err
}

const listFilesByOwner = `-- name: ListFilesByOwner :many
SELECT id, owner_id, blob_id, filename, declared_mime, size, uploaded_at, is_public, public_token, download_count
FROM files
WHERE owner_id = $1
ORDER BY uploaded_at DESC
`

func (q *Queries) ListFilesByOwner(ctx context.Context, ownerID int64) ([]File, error) {
	rows, err := q.db.Query(ctx, listFilesByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.BlobID,
			&i.Filename,
			&i.DeclaredMime,
			&i.Size,
			&i.UploadedAt,
			&i.IsPublic,
			&i.PublicToken,
			&i.DownloadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlobRefcount = `-- name: UpdateBlobRefcount :exec
UPDATE blobs SET refcount = refcount + $2 WHERE id = $1
`

type UpdateBlobRefcountParams struct {
	ID       uuid.UUID `json:"id"`
	Refcount int32     `json:"refcount"`
}

func (q *Queries) UpdateBlobRefcount(ctx context.Context, arg UpdateBlobRefcountParams) error {
	_, err := q.db.Exec(ctx, updateBlobRefcount, arg.ID, arg.Refcount)
	return err
}

const userOwnsBlob = `-- name: UserOwnsBlob :one
SELECT 1 FROM files WHERE owner_id = $1 AND blob_id = $2 LIMIT 1
`

type UserOwnsBlobParams struct {
	OwnerID int64     `json:"owner_id"`
	BlobID  uuid.UUID `json:"blob_id"`
}

func (q *Queries) UserOwnsBlob(ctx context.Context, arg UserOwnsBlobParams) (int32, error) {
	row := q.db.QueryRow(ctx, userOwnsBlob, arg.OwnerID, arg.BlobID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
